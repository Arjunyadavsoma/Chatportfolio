An interactive chatbot portfolio website (Next.js + Tailwind) deployed on Vercel.

Right Panel: Chatbot powered by Groq API

Left Panel: Dynamic visuals (photo, projects, resume PDF, certificates, skills infographic).

No backend server needed â†’ everything runs in Next.js serverless functions (Vercel friendly).

ðŸ”¹ Tech Stack

Next.js 14 (App Router) â†’ React framework, supports API routes.

Tailwind CSS â†’ styling (glassmorphism, gradients, split UI).

Framer Motion â†’ smooth transitions (project slides, photo fade-ins).

Groq API â†’ free AI chat, no heavy setup.

Vercel â†’ free, one-click deploy from GitHub.

ðŸ”¹ File Structure
portfolio-chatbot/
 â”œâ”€ app/
 â”‚   â”œâ”€ layout.tsx         # Split-screen layout
 â”‚   â”œâ”€ page.tsx           # Home page
 â”‚   â”œâ”€ api/
 â”‚   â”‚   â””â”€ chat/route.ts  # Serverless API for Groq
 â”‚   â”œâ”€ components/
 â”‚   â”‚   â”œâ”€ LeftPanel.tsx  # Shows visuals (photo, resume, projects)
 â”‚   â”‚   â”œâ”€ Chatbot.tsx    # Chat UI
 â”‚   â”‚   â”œâ”€ Message.tsx    # Chat bubble
 â”‚   â”‚   â””â”€ ProjectCard.tsx
 â”‚   â””â”€ lib/data.json      # Projects, skills, resume meta
 â”œâ”€ public/
 â”‚   â”œâ”€ resume.pdf
 â”‚   â”œâ”€ images/
 â”‚   â”‚   â”œâ”€ arjun.jpg
 â”‚   â”‚   â”œâ”€ ai_interview.png
 â”‚   â”‚   â””â”€ certificates/
 â”œâ”€ .env.local             # Groq API key
 â”œâ”€ package.json
 â””â”€ tailwind.config.js

ðŸ”¹ API Integration with Groq

Step 1: Install SDK

npm install groq-sdk


Step 2: Add API route â†’ app/api/chat/route.ts

import { NextResponse } from "next/server";
import Groq from "groq-sdk";

const client = new Groq({ apiKey: process.env.GROQ_API_KEY! });

export async function POST(req: Request) {
  const { messages } = await req.json();

  const chatCompletion = await client.chat.completions.create({
    model: "mixtral-8x7b-32768", // free + fast
    messages,
  });

  return NextResponse.json({ reply: chatCompletion.choices[0].message });
}

ðŸ”¹ Chatbot Component

app/components/Chatbot.tsx

"use client";
import { useState } from "react";

export default function Chatbot() {
  const [messages, setMessages] = useState([
    { role: "assistant", content: "ðŸ‘‹ Hi! Iâ€™m Arjunâ€™s AI Portfolio. Ask me about projects, resume, or skills." }
  ]);
  const [input, setInput] = useState("");

  const sendMessage = async () => {
    if (!input) return;

    const newMsg = { role: "user", content: input };
    setMessages([...messages, newMsg]);

    const res = await fetch("/api/chat", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ messages: [...messages, newMsg] }),
    });
    const data = await res.json();

    setMessages([...messages, newMsg, data.reply]);
    setInput("");
  };

  return (
    <div className="flex flex-col h-full p-4">
      <div className="flex-1 overflow-y-auto space-y-3">
        {messages.map((msg, i) => (
          <div key={i} className={msg.role === "assistant" ? "text-green-400" : "text-blue-400"}>
            {msg.content}
          </div>
        ))}
      </div>
      <div className="flex mt-4">
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="flex-1 rounded-l-lg px-3 py-2 text-black"
          placeholder="Ask me about Arjun..."
        />
        <button onClick={sendMessage} className="bg-blue-600 px-4 py-2 rounded-r-lg">
          Send
        </button>
      </div>
    </div>
  );
}

ðŸ”¹ Left Panel Component

app/components/LeftPanel.tsx

"use client";
import { useState } from "react";
import Image from "next/image";

export default function LeftPanel() {
  const [view, setView] = useState("photo"); // "projects" | "resume" | "skills"

  return (
    <div className="flex items-center justify-center h-full p-6">
      {view === "photo" && (
        <Image src="/images/arjun.jpg" alt="Arjun" width={300} height={300} className="rounded-2xl shadow-lg" />
      )}
      {view === "resume" && (
        <iframe src="/resume.pdf" className="w-full h-full rounded-xl"></iframe>
      )}
      {view === "projects" && (
        <div className="grid gap-4">
          <Image src="/images/ai_interview.png" alt="Project" width={400} height={250} className="rounded-lg" />
        </div>
      )}
    </div>
  );
}

ðŸ”¹ Deployment Steps

Create project

npx create-next-app@latest portfolio-chatbot
cd portfolio-chatbot
npm install tailwindcss framer-motion groq-sdk
npx tailwindcss init -p


Add environment key
In .env.local:

GROQ_API_KEY=your_api_key_here


Push to GitHub

git init
git add .
git commit -m "Arjun Portfolio Chatbot"
git branch -M main
git remote add origin https://github.com/<your-username>/portfolio-chatbot.git
git push -u origin main


Deploy on Vercel

Go to Vercel Dashboard
 â†’ Import GitHub repo.

Add environment variable GROQ_API_KEY.

Click Deploy â†’ your chatbot is live ðŸŽ‰

âœ… With this setup:

Zero backend server â†’ Vercel serverless handles API.

Free AI (Groq) â†’ no hidden costs.

Easy customization â†’ just update data.json with your projects, skills, and links.